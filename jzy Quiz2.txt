from random import seed, shuffle
import sys


# for_seed is meant to be an integer, length a strictly positive integer.
# length will not be large for most tests, but can be as large as 10_000_000.
def generate_permutation(for_seed, length):
    seed(for_seed)
    values = list(range(1, length + 1))
    shuffle(values)
    return values
    

def maps_to(values, x):
    y = values.index(x)
    return y + 1
    
    
    # REPLACE PASS ABOVE WITH YOUR CODE

    
def length_of_cycle_containing(values, x):
    t = 1
    i = maps_to(values,x)
    while(i != x):
        i = maps_to(values,i)
        t = t + 1
    # length= how many times program goes through maps_to()
    return t
    # REPLACE PASS ABOVE WITH YOUR CODE

# Returns a list of length len(values) + 1, with 0 at index 0
# and for all x in {1, ..., len(values)}, the length of the cycle
# containing x at index x.
def analyse(values):
    list=[0,]
    i=0
    while(i<len(values)):
        l=length_of_cycle_containing(values,values[i])
        list.append(l)
        i=i+1
    # sort length in list by element sequence of generate_permutation
    return list
    # REPLACE PASS ABOVE WITH YOUR CODE